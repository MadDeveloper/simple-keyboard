{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/PhysicalKeyboard.js","services/KeyboardLayout.js","services/Utilities.js","components/Keyboard.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PhysicalKeyboard","simpleKeyboardInstance","_classCallCheck","this","initKeyboardListener","getSimpleKeyboardLayoutKey","_this","document","addEventListener","event","options","physicalKeyboardHighlight","buttonPressed","dispatch","instance","buttonDOM","getButtonElement","concat","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","output","code","includes","toUpperCase","Number","isInteger","length","toLowerCase","KeyboardLayout","default","shift","Utilities","Utilities_classCallCheck","getButtonClass","getButtonDisplayName","getUpdatedInput","updateCaretPos","updateCaretPosAction","isMaxLengthReached","camelCase","countInArray","button","buttonTypeClass","buttonWithoutBraces","replace","buttonNormalized","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","minus","newCaretPos","syncInstanceInputs","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","trim","split","reduce","word","array","x","SimpleKeyboard","Keyboard_classCallCheck","_defineProperty","option","render","initCallback","prop","keys","keyboardDOMQuery","arguments","undefined","Keyboard_typeof","utilities","keyboardDOM","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","handleButtonClicked","clearInput","getInput","setInput","replaceInput","clear","addButtonTheme","removeButtonTheme","handleCaret","caretEventHandler","onInit","onRender","loadModules","handleButtonMouseUp","handleButtonMouseDown","handleButtonHold","onModulesLoaded","buttonElements","warn","Error","physicalKeyboardInterface","onKeyPress","handleMaxLength","onChange","e","_this2","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","setTimeout","_this3","_this4","innerHTML","className","callback","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","simpleKeyboardInstances","targetTagName","target","tagName","disableCaretPositioning","selectionStart","_this7","Module","constructor","classStr","init","_this8","layoutClass","layout","getDefaultLayout","useTouchEvents","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","row","rIndex","rowArray","rowDOM","createElement","bIndex","fctBtnClass","buttonThemeClass","buttonDisplayName","ontouchstart","ontouchend","ontouchcancel","onclick","onmousedown","preventDefault","setAttribute","buttonUID","buttonSpanDOM","appendChild","initialized","onmouseup"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Physical Keyboard Service\n */\nclass PhysicalKeyboard {\n  /**\n   * Creates an instance of the PhysicalKeyboard service\n   */\n  constructor(simpleKeyboardInstance){\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\n\n    /**\n     * Bindings\n     */\n    this.initKeyboardListener = this.initKeyboardListener.bind(this);\n    this.getSimpleKeyboardLayoutKey = this.getSimpleKeyboardLayoutKey.bind(this);\n\n    /**\n     * Initialize key listeners\n     */\n    this.initKeyboardListener();\n  }\n\n  /**\n   * Initializes key event listeners\n   */\n  initKeyboardListener(){\n    // Adding button style on keydown\n    document.addEventListener(\"keydown\", (event) => {\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n        this.simpleKeyboardInstance.dispatch(instance => {\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\n\n          if(buttonDOM){\n            buttonDOM.style.backgroundColor = this.simpleKeyboardInstance.options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\n            buttonDOM.style.color = this.simpleKeyboardInstance.options.physicalKeyboardHighlightTextColor || \"white\";\n          }\n        });\n      }\n    });\n\n    // Removing button style on keyup\n    document.addEventListener(\"keyup\", (event) => {\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n        this.simpleKeyboardInstance.dispatch(instance => {\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\n\n          if(buttonDOM && buttonDOM.removeAttribute){\n            buttonDOM.removeAttribute(\"style\");\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\n   * @param  {object} event The KeyboardEvent\n   */\n  getSimpleKeyboardLayoutKey(event){\n    let output;\n\n    if(\n      event.code.includes(\"Numpad\") ||\n      event.code.includes(\"Shift\") ||\n      event.code.includes(\"Space\") ||\n      event.code.includes(\"Backspace\") ||\n      event.code.includes(\"Control\") ||\n      event.code.includes(\"Alt\") ||\n      event.code.includes(\"Meta\")\n    ){\n      output = event.code;\n    } else {\n      output = event.key;\n    }\n\n    /**\n     * If button is not uppercase, casting to lowercase\n     */\n    if (\n      output !== output.toUpperCase() ||\n      (event.code[0] === \"F\" && Number.isInteger(Number(event.code[1])) && event.code.length <= 3)\n    ) {\n      output = output.toLowerCase();\n    }\n\n    return output;\n  }\n}\n\nexport default PhysicalKeyboard;","/**\n * Keyboard Layout Service\n */\nclass KeyboardLayout {\n  /**\n   * Get default simple-keyboard layout\n   * @return {object} The default layout (US-QWERTY)\n   */\n  static getDefaultLayout(){\n    return {\n      'default': [\n        '` 1 2 3 4 5 6 7 8 9 0 - = {bksp}',\n        '{tab} q w e r t y u i o p [ ] \\\\',\n        '{lock} a s d f g h j k l ; \\' {enter}',\n        '{shift} z x c v b n m , . / {shift}',\n        '.com @ {space}'\n      ],\n      'shift': [\n        '~ ! @ # $ % ^ & * ( ) _ + {bksp}',\n        '{tab} Q W E R T Y U I O P { } |',\n        '{lock} A S D F G H J K L : \" {enter}',\n        '{shift} Z X C V B N M < > ? {shift}',\n        '.com @ {space}'\n      ]\n    } \n  }\n}\n\nexport default KeyboardLayout;","/**\n * Utility Service\n */\nclass Utilities {\n  /**\n   * Creates an instance of the Utility service\n   */\n  constructor(simpleKeyboardInstance){\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\n\n    /**\n     * Bindings\n     */\n    this.getButtonClass = this.getButtonClass.bind(this);\n    this.getButtonDisplayName = this.getButtonDisplayName.bind(this);\n    this.getUpdatedInput = this.getUpdatedInput.bind(this);\n    this.updateCaretPos = this.updateCaretPos.bind(this);\n    this.updateCaretPosAction = this.updateCaretPosAction.bind(this);\n    this.isMaxLengthReached = this.isMaxLengthReached.bind(this);\n    this.camelCase = this.camelCase.bind(this);\n    this.countInArray = this.countInArray.bind(this);\n  }\n\n  /**\n   * Adds default classes to a given button\n   * \n   * @param  {string} button The button's layout name\n   * @return {string} The classes to be added to the button\n   */\n  getButtonClass(button){\n    let buttonTypeClass = (button.includes(\"{\") && button.includes(\"}\") && button !== '{//}') ? \"functionBtn\" : \"standardBtn\";\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\n    let buttonNormalized = '';\n\n    if(buttonTypeClass !== \"standardBtn\")\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\n\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\n  }\n\n  /**\n   * Default button display labels\n   */\n  getDefaultDiplay(){\n    return {\n      '{bksp}': 'backspace',\n      '{backspace}': 'backspace',\n      '{enter}': '< enter',\n      '{shift}': 'shift',\n      '{shiftleft}': 'shift',\n      '{shiftright}': 'shift',\n      '{alt}': 'alt',\n      '{s}': 'shift',\n      '{tab}': 'tab',\n      '{lock}': 'caps',\n      '{capslock}': 'caps',\n      '{accept}': 'Submit',\n      '{space}': ' ',\n      '{//}': ' ',\n      \"{esc}\": \"esc\",\n      \"{escape}\": \"esc\",\n      \"{f1}\": \"f1\",\n      \"{f2}\": \"f2\",\n      \"{f3}\": \"f3\",\n      \"{f4}\": \"f4\",\n      \"{f5}\": \"f5\",\n      \"{f6}\": \"f6\",\n      \"{f7}\": \"f7\",\n      \"{f8}\": \"f8\",\n      \"{f9}\": \"f9\",\n      \"{f10}\": \"f10\",\n      \"{f11}\": \"f11\",\n      \"{f12}\": \"f12\",\n      '{numpaddivide}': '/',\n      '{numlock}': 'lock',\n      \"{arrowup}\": \"↑\",\n      \"{arrowleft}\": \"←\",\n      \"{arrowdown}\": \"↓\",\n      \"{arrowright}\": \"→\",\n      \"{prtscr}\": \"print\",\n      \"{scrolllock}\": \"scroll\",\n      \"{pause}\": \"pause\",\n      \"{insert}\": \"ins\",\n      \"{home}\": \"home\",\n      \"{pageup}\": \"up\",\n      \"{delete}\": \"del\",\n      \"{end}\": \"end\",\n      \"{pagedown}\": \"down\",\n      \"{numpadmultiply}\": \"*\",\n      \"{numpadsubtract}\": \"-\",\n      \"{numpadadd}\": \"+\",\n      \"{numpadenter}\": \"enter\",\n      \"{period}\": \".\",\n      \"{numpaddecimal}\": \".\",\n      \"{numpad0}\": \"0\",\n      \"{numpad1}\": \"1\",\n      \"{numpad2}\": \"2\",\n      \"{numpad3}\": \"3\",\n      \"{numpad4}\": \"4\",\n      \"{numpad5}\": \"5\",\n      \"{numpad6}\": \"6\",\n      \"{numpad7}\": \"7\",\n      \"{numpad8}\": \"8\",\n      \"{numpad9}\": \"9\",\n    };\n  }\n  /**\n   * Returns the display (label) name for a given button\n   * \n   * @param  {string} button The button's layout name\n   * @param  {object} display The provided display option\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\n   */\n  getButtonDisplayName(button, display, mergeDisplay){\n    if(mergeDisplay){\n      display = Object.assign({}, this.getDefaultDiplay(), display);\n    } else {\n      display = display || this.getDefaultDiplay();\n    }\n\n    return display[button] || button;\n  }\n\n  \n  /**\n   * Returns the updated input resulting from clicking a given button\n   * \n   * @param  {string} button The button's layout name\n   * @param  {string} input The input string\n   * @param  {object} options The simple-keyboard options object\n   * @param  {number} caretPos The cursor's current position\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  getUpdatedInput(button, input, options, caretPos, moveCaret){\n    \n    let output = input;\n\n    if((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0){\n      output = this.removeAt(output, caretPos, moveCaret);\n\n    } else if(button === \"{space}\")\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\n\n    else if(button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)){\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\n\n    } else if((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\n\n    else if(button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))){\n      output = this.addStringAt(output, button[button.length - 2], caretPos, moveCaret);\n    }\n    else if(button === \"{numpaddivide}\")\n      output = this.addStringAt(output, '/', caretPos, moveCaret);\n\n    else if(button === \"{numpadmultiply}\")\n      output = this.addStringAt(output, '*', caretPos, moveCaret);\n\n    else if(button === \"{numpadsubtract}\")\n      output = this.addStringAt(output, '-', caretPos, moveCaret);\n\n    else if(button === \"{numpadadd}\")\n      output = this.addStringAt(output, '+', caretPos, moveCaret);\n\n    else if(button === \"{numpaddecimal}\")\n      output = this.addStringAt(output, '.', caretPos, moveCaret);\n\n    else if(button === \"{\" || button === \"}\")\n      output = this.addStringAt(output, button, caretPos, moveCaret);\n\n    else if(!button.includes(\"{\") && !button.includes(\"}\"))\n      output = this.addStringAt(output, button, caretPos, moveCaret);\n\n    return output;\n  }\n\n  /**\n   * Moves the cursor position by a given amount\n   * \n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPos(length, minus){\n    let newCaretPos = this.updateCaretPosAction(this.simpleKeyboardInstance, length, minus);\n\n    if(this.simpleKeyboardInstance.options.syncInstanceInputs){\n      this.simpleKeyboardInstance.dispatch(instance => {\n        instance.caretPosition = newCaretPos;\n      });\n    }\n  }\n\n  /**\n   * Action method of updateCaretPos\n   * \n   * @param  {object} instance The instance whose position should be updated\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPosAction(instance, length, minus){\n    if(minus){\n      if(instance.caretPosition > 0)\n      instance.caretPosition = instance.caretPosition - length;\n    } else {\n      instance.caretPosition = instance.caretPosition + length;\n    }\n\n    if(this.simpleKeyboardInstance.options.debug){\n      console.log(\"Caret at:\", instance.caretPosition, `(${instance.keyboardDOMClass})`);\n    }\n\n    return instance.caretPosition;\n  }\n\n  /**\n   * Adds a string to the input at a given position\n   * \n   * @param  {string} source The source input\n   * @param  {string} string The string to add\n   * @param  {number} position The (cursor) position where the string should be added\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  addStringAt(source, string, position, moveCaret){\n    let output;\n\n    if(!position && position !== 0){\n      output = source + string;\n    } else {\n      output = [source.slice(0, position), string, source.slice(position)].join('');\n\n      /**\n       * Avoid caret position change when maxLength is set\n       */\n      if(!this.isMaxLengthReached()){\n        if(moveCaret) this.updateCaretPos(string.length);\n      }\n\n    }\n\n    return output;\n  }\n\n  /**\n   * Removes an amount of characters at a given position\n   * \n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  removeAt(source, position, moveCaret){\n    if(this.simpleKeyboardInstance.caretPosition === 0){\n      return source;\n    }\n\n    let output;\n    let prevTwoChars;\n    let emojiMatched;\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n    /**\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\n     */\n    if(position && position >= 0){\n      prevTwoChars = source.substring(position - 2, position)\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n      if(emojiMatched){\n        output = source.substr(0, (position - 2)) + source.substr(position);\n        if(moveCaret) this.updateCaretPos(2, true);\n      } else {\n        output = source.substr(0, (position - 1)) + source.substr(position);\n        if(moveCaret) this.updateCaretPos(1, true);\n      }\n    } else {\n      prevTwoChars = source.slice(-2);\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n      if(emojiMatched){\n        output = source.slice(0, -2);\n        if(moveCaret) this.updateCaretPos(2, true);\n      } else {\n        output = source.slice(0, -1);\n        if(moveCaret) this.updateCaretPos(1, true);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\n   * \n   * @param  {object} inputObj\n   * @param  {object} options\n   * @param  {string} updatedInput\n   */\n  handleMaxLength(inputObj, options, updatedInput){\n    let maxLength = options.maxLength;\n    let currentInput = inputObj[options.inputName];\n    let condition = currentInput.length === maxLength;\n\n    if(\n      /**\n       * If pressing this button won't add more characters\n       * We exit out of this limiter function\n       */\n      updatedInput.length <= currentInput.length\n    ){\n      return false;\n    }\n\n    if(Number.isInteger(maxLength)){\n      if(options.debug){\n        console.log(\"maxLength (num) reached:\", condition);\n      }\n\n      if(condition){\n        /**\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\n         */\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n\n    if(typeof maxLength === \"object\"){\n      let condition = currentInput.length === maxLength[options.inputName];\n\n      if(options.debug){\n        console.log(\"maxLength (obj) reached:\", condition);\n      }\n\n      if(condition){\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Gets the current value of maxLengthReached\n   */\n  isMaxLengthReached(){\n    return Boolean(this.maxLengthReached);\n  }\n\n  /**\n   * Transforms an arbitrary string to camelCase\n   * \n   * @param  {string} string The string to transform.\n   */\n  camelCase(string){\n    return string.toLowerCase().trim().split(/[.\\-_\\s]/g).reduce((string, word) => string + word[0].toUpperCase() + word.slice(1));\n  };\n\n  /**\n   * Counts the number of duplicates in a given array\n   * \n   * @param  {Array} array The haystack to search in\n   * @param  {string} value The needle to search for\n   */\n  countInArray(array, value){\n    return array.reduce((n, x) => n + (x === value), 0);\n  }\n}\n\nexport default Utilities;","import './Keyboard.css';\n\n// Services\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\nimport KeyboardLayout from '../services/KeyboardLayout';\nimport Utilities from '../services/Utilities';\n\n/**\n * Root class for simple-keyboard\n * This class:\n * - Parses the options\n * - Renders the rows and buttons\n * - Handles button functionality\n */\nclass SimpleKeyboard {\n  /**\n   * Creates an instance of SimpleKeyboard\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\n   */\n  constructor(...params){\n    let keyboardDOMQuery = typeof params[0] === \"string\" ? params[0] : '.simple-keyboard';\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\n\n    if(!options)\n      options = {};\n\n    /**\n     * Initializing Utilities\n     */\n    this.utilities = new Utilities(this);\n\n    /**\n     * Processing options\n     */\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\n\n    /**\n     * @type {object}\n     * @property {object} layout Modify the keyboard layout.\n     * @property {string} layoutName Specifies which layout should be used.\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\n     */\n    this.options = options;\n    this.options.layoutName = this.options.layoutName || \"default\";\n    this.options.theme = this.options.theme || \"hg-theme-default\";\n    this.options.inputName = this.options.inputName || \"default\";\n    this.options.preventMouseDownDefault = this.options.preventMouseDownDefault || false;\n\n    /**\n     * @type {object} Classes identifying loaded plugins\n     */\n    this.keyboardPluginClasses = '';\n\n    /**\n     * Bindings\n     */\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\n    this.syncInstanceInputs = this.syncInstanceInputs.bind(this);\n    this.clearInput = this.clearInput.bind(this);\n    this.getInput = this.getInput.bind(this);\n    this.setInput = this.setInput.bind(this);\n    this.replaceInput = this.replaceInput.bind(this);\n    this.clear = this.clear.bind(this);\n    this.dispatch = this.dispatch.bind(this);\n    this.addButtonTheme = this.addButtonTheme.bind(this);\n    this.removeButtonTheme = this.removeButtonTheme.bind(this);\n    this.getButtonElement = this.getButtonElement.bind(this);\n    this.handleCaret = this.handleCaret.bind(this);\n    this.caretEventHandler = this.caretEventHandler.bind(this);\n    this.onInit = this.onInit.bind(this);\n    this.onRender = this.onRender.bind(this);\n    this.render = this.render.bind(this);\n    this.loadModules = this.loadModules.bind(this);\n    this.handleButtonMouseUp = this.handleButtonMouseUp.bind(this);\n    this.handleButtonMouseDown = this.handleButtonMouseDown.bind(this);\n    this.handleButtonHold = this.handleButtonHold.bind(this);\n    this.onModulesLoaded = this.onModulesLoaded.bind(this);\n\n    /**\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\n     * @example\n     * // To get entered input\n     * let input = keyboard.getInput();\n     * \n     * // To clear entered input.\n     * keyboard.clearInput();\n     * \n     * @type {object}\n     * @property {object} default Default SimpleKeyboard internal input.\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\n     */\n    this.input = {};\n    this.input[this.options.inputName] = '';\n\n    /**\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\n     */\n    this.keyboardDOMClass = keyboardDOMQuery.split('.').join(\"\");\n\n    /**\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\n     */\n    this.buttonElements = {};\n\n    /**\n     * Rendering keyboard\n     */\n    if(this.keyboardDOM)\n      this.render();\n    else {\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\n    }\n\n    /**\n     * Saving instance\n     * This enables multiple simple-keyboard support with easier management\n     */\n    if(!window['SimpleKeyboardInstances'])\n      window['SimpleKeyboardInstances'] = {};\n      \n    window['SimpleKeyboardInstances'][this.utilities.camelCase(this.keyboardDOMClass)] = this;\n\n    /**\n     * Physical Keyboard support\n     */\n    this.physicalKeyboardInterface = new PhysicalKeyboard(this);\n\n    /**\n     * Modules\n     */\n    this.modules = {};\n    this.loadModules();\n  }\n\n  /**\n   * Handles clicks made to keyboard buttons\n   * @param  {string} button The button's layout name.\n   */\n  handleButtonClicked(button){\n    let debug = this.options.debug;\n\n    /**\n     * Ignoring placeholder buttons\n     */\n    if(button === '{//}')\n      return false;\n\n    /**\n     * Calling onKeyPress\n     */\n    if(typeof this.options.onKeyPress === \"function\")\n      this.options.onKeyPress(button);\n    \n    if(!this.input[this.options.inputName])\n      this.input[this.options.inputName] = '';\n\n    let updatedInput = this.utilities.getUpdatedInput(\n      button, this.input[this.options.inputName], this.options, this.caretPosition\n    );\n\n    if(this.input[this.options.inputName] !== updatedInput){\n\n      /**\n       * If maxLength and handleMaxLength yield true, halting\n       */\n      if(this.options.maxLength && this.utilities.handleMaxLength(this.input, this.options, updatedInput)){\n        return false;\n      }\n\n      this.input[this.options.inputName]  = this.utilities.getUpdatedInput(\n        button, this.input[this.options.inputName], this.options, this.caretPosition, true\n      );\n\n      if(debug)\n        console.log('Input changed:', this.input);\n\n      /**\n       * Enforce syncInstanceInputs, if set\n       */\n      if(this.options.syncInstanceInputs)\n        this.syncInstanceInputs(this.input);\n\n      /**\n       * Calling onChange\n       */\n      if(typeof this.options.onChange === \"function\")\n        this.options.onChange(this.input[this.options.inputName]);\n    }\n    \n    if(debug){\n      console.log(\"Key pressed:\", button);\n    }\n  }\n\n  /**\n   * Handles button mousedown\n   */\n  /* istanbul ignore next */\n  handleButtonMouseDown(button, e){\n    /**\n     * @type {boolean} Whether the mouse is being held onKeyPress\n     */\n    this.isMouseHold = true;\n\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n\n    if(this.holdTimeout)\n      clearTimeout(this.holdTimeout);\n\n    /**\n     * @type {object} Time to wait until a key hold is detected\n     */\n    this.holdTimeout = setTimeout(() => {\n      if(\n        this.isMouseHold  &&\n        (\n          (!button.includes(\"{\") && !button.includes(\"}\")) ||\n          button === \"{bksp}\" ||\n          button === \"{space}\" ||\n          button === \"{tab}\"\n        )\n      ){\n        if(this.options.debug)\n          console.log(\"Button held:\", button);\n\n        this.handleButtonHold(button, e);\n      }\n      clearTimeout(this.holdTimeout);\n    }, 500);\n  }\n\n  /**\n   * Handles button mouseup\n   */\n  handleButtonMouseUp(){\n    this.isMouseHold = false;\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n  }\n\n  /**\n   * Handles button hold\n   */\n  /* istanbul ignore next */\n  handleButtonHold(button){\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * @type {object} Timeout dictating the speed of key hold iterations\n     */\n    this.holdInteractionTimeout = setTimeout(() => {\n      if(this.isMouseHold){\n        this.handleButtonClicked(button);\n        this.handleButtonHold(button);\n      } else {\n        clearTimeout(this.holdInteractionTimeout);\n      }\n    }, 100);\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances (if you have several instances).\n   */\n  syncInstanceInputs(){\n    this.dispatch((instance) => {\n      instance.replaceInput(this.input);\n    });\n  }\n  \n  /**\n   * Clear the keyboard’s input.\n   * @param {string} [inputName] optional - the internal input to select\n   */\n  clearInput(inputName){\n    inputName = inputName || this.options.inputName;\n    this.input[inputName] = '';\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n  }\n\n  /**\n   * Get the keyboard’s input (You can also get it from the onChange prop).\n   * @param  {string} [inputName] optional - the internal input to select\n   */\n  getInput(inputName){\n    inputName = inputName || this.options.inputName;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n\n    return this.input[this.options.inputName];\n  }\n\n  /**\n   * Set the keyboard’s input.\n   * @param  {string} input the input value\n   * @param  {string} inputName optional - the internal input to select\n   */\n  setInput(input, inputName){\n    inputName = inputName || this.options.inputName;\n    this.input[inputName] = input;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n  }\n  \n  /**\n   * Replace the input object (`keyboard.input`)\n   * @param  {object} inputObj The input object\n   */\n  replaceInput(inputObj){\n    this.input = inputObj;\n  }\n\n  /**\n   * Set new option or modify existing ones after initialization. \n   * @param  {object} option The option to set\n   */\n  setOptions = option => {\n    option = option || {};\n    this.options = Object.assign(this.options, option);\n    this.render();\n  }\n\n  /**\n   * Remove all keyboard rows and reset keyboard values.\n   * Used interally between re-renders.\n   */\n  clear(){\n    this.keyboardDOM.innerHTML = '';\n    this.keyboardDOM.className = this.keyboardDOMClass;\n    this.buttonElements = {};\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\n   */\n  dispatch(callback){\n    if(!window['SimpleKeyboardInstances']){\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\n      throw new Error(\"INSTANCES_VAR_ERROR\");\n    }\n    \n    return Object.keys(window['SimpleKeyboardInstances']).forEach((key) => {\n      callback(window['SimpleKeyboardInstances'][key], key);\n    })\n  }\n\n  /**\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  addButtonTheme(buttons, className){\n    if(!className || !buttons)\n      return false;\n\n    buttons.split(\" \").forEach(button => {\n      className.split(\" \").forEach(classNameItem => {\n        if(!this.options.buttonTheme)\n          this.options.buttonTheme = [];\n\n        let classNameFound = false;\n  \n        /**\n         * If class is already defined, we add button to class definition\n         */\n        this.options.buttonTheme.map(buttonTheme => {\n\n          if(buttonTheme.class.split(\" \").includes(classNameItem)){\n            classNameFound = true;\n            \n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\n            if(!buttonThemeArray.includes(button)){\n              classNameFound = true;\n              buttonThemeArray.push(button);\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\n            }\n          }\n          return buttonTheme;\n        });\n\n        /**\n         * If class is not defined, we create a new entry\n         */\n        if(!classNameFound){\n          this.options.buttonTheme.push({\n            class: classNameItem,\n            buttons: buttons\n          });\n        }\n\n      });\n    });\n\n    this.render();\n  }\n\n  /**\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  removeButtonTheme(buttons, className){\n    /**\n     * When called with empty parameters, remove all button themes\n     */\n    if(!buttons && !className){\n      this.options.buttonTheme = [];\n      this.render();\n      return false;\n    }\n\n    /**\n     * If buttons are passed and buttonTheme has items\n     */\n    if(buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length){\n      let buttonArray = buttons.split(\" \");\n      buttonArray.forEach((button, key) => {\n        this.options.buttonTheme.map((buttonTheme, index) => {\n\n          /**\n           * If className is set, we affect the buttons only for that class\n           * Otherwise, we afect all classes\n           */\n          if(\n            (className && className.includes(buttonTheme.class)) ||\n            !className\n          ){\n            let filteredButtonArray = buttonTheme.buttons.split(\" \").filter(item => item !== button);\n\n            /**\n             * If buttons left, return them, otherwise, remove button Theme\n             */\n            if(filteredButtonArray.length){\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\n            } else {\n              this.options.buttonTheme.splice(index, 1);\n              buttonTheme = null;\n            }\n \n          }\n\n          return buttonTheme;\n        });\n      });\n\n      this.render();\n    }\n  }\n\n  /**\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\n   * @param  {string} button The button layout name to select\n   */\n  getButtonElement(button){\n    let output;\n\n    let buttonArr = this.buttonElements[button];\n    if(buttonArr){\n      if(buttonArr.length > 1){\n        output = buttonArr;\n      } else {\n        output = buttonArr[0];\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Retrieves the current cursor position within a input or textarea (if any)\n   */\n  handleCaret(){\n    /**\n     * Only first instance should insall the caret handling events\n     */\n    this.caretPosition = null;\n    let simpleKeyboardInstances = window['SimpleKeyboardInstances'];\n\n    if(\n      (\n        simpleKeyboardInstances &&\n        Object.keys(simpleKeyboardInstances)[0] === this.utilities.camelCase(this.keyboardDOMClass)\n      ) ||\n      !simpleKeyboardInstances\n    ){\n    if(this.options.debug){\n        console.log(`Caret handling started (${this.keyboardDOMClass})`)\n    }\n\n    document.addEventListener(\"keyup\", this.caretEventHandler);\n    document.addEventListener(\"mouseup\", this.caretEventHandler);\n    document.addEventListener(\"touchend\", this.caretEventHandler);\n  }\n  }\n\n  /**\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\n   */\n  caretEventHandler(event){\n    let targetTagName;\n    if(event.target.tagName){\n      targetTagName = event.target.tagName.toLowerCase();\n    }\n\n    this.dispatch(instance => {\n      if(instance.isMouseHold){\n        instance.isMouseHold = false;\n    }\n\n    if(\n      (targetTagName === \"textarea\" ||\n      targetTagName === \"input\") &&\n        !instance.options.disableCaretPositioning\n    ){\n      /**\n       * Tracks current cursor position\n       * As keys are pressed, text will be added/removed at that position within the input.\n       */\n        instance.caretPosition = event.target.selectionStart;\n\n        if(instance.options.debug){\n          console.log('Caret at: ', event.target.selectionStart, event.target.tagName.toLowerCase(), `(${instance.keyboardDOMClass})`);\n      }     \n    }\n    });\n  }\n\n  /**\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n   */\n  onInit(){\n    if(this.options.debug){\n      console.log(`${this.keyboardDOMClass} Initialized`)\n    }\n\n    /**\n     * Caret handling\n     */\n    this.handleCaret();\n\n    if(typeof this.options.onInit === \"function\")\n      this.options.onInit();\n  }\n\n  /**\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n   */\n  onRender(){\n    if(typeof this.options.onRender === \"function\")\n      this.options.onRender();\n  }\n\n /**\n  * Executes the callback function once all modules have been loaded\n  */\n  onModulesLoaded(){\n    if(typeof this.options.onModulesLoaded === \"function\")\n      this.options.onModulesLoaded();\n  }\n\n  /**\n   * Register module\n   */\n  registerModule = (name, initCallback) => {\n    if(!this.modules[name])\n      this.modules[name] = {};\n\n    initCallback(this.modules[name]);\n  }\n\n  /**\n   * Load modules\n   */\n  loadModules(){\n    if(Array.isArray(this.options.modules)){\n      this.options.modules.forEach(Module => {\n        let module = new Module();\n\n        /* istanbul ignore next */\n        if(module.constructor.name && module.constructor.name !== \"Function\"){\n          let classStr = `module-${this.utilities.camelCase(module.constructor.name)}`;\n          this.keyboardPluginClasses = this.keyboardPluginClasses + ` ${classStr}`;\n        }\n\n        module.init(this);\n      });\n\n      this.keyboardPluginClasses = this.keyboardPluginClasses + ' modules-loaded';\n\n      this.render();\n      this.onModulesLoaded();\n    }\n  }\n\n  /**\n   * Get module prop\n   */\n  getModuleProp = (name, prop) => {\n    if(!this.modules[name])\n      return false;\n    \n    return this.modules[name][prop];\n  }\n\n  /**\n   * getModulesList\n   */\n  getModulesList = () => {\n    return Object.keys(this.modules);\n  }\n\n  /**\n   * Renders rows and buttons as per options\n   */\n  render(){\n    /**\n     * Clear keyboard\n     */\n    this.clear();\n\n    let layoutClass = this.options.layout ? \"hg-layout-custom\" : `hg-layout-${this.options.layoutName}`;\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\n    let useTouchEvents = this.options.useTouchEvents || false\n\n    /**\n     * Account for buttonTheme, if set\n     */\n    let buttonThemesParsed = {};\n    if(Array.isArray(this.options.buttonTheme)){\n      this.options.buttonTheme.forEach(themeObj => {\n        if(themeObj.buttons && themeObj.class){\n          let themeButtons;\n\n          if(typeof themeObj.buttons === \"string\"){\n            themeButtons = themeObj.buttons.split(' ');\n          }\n\n          if(themeButtons){\n            themeButtons.forEach(themeButton => {\n              let themeParsed = buttonThemesParsed[themeButton];\n\n              // If the button has already been added\n              if(themeParsed){\n                // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\n                if(!this.utilities.countInArray(themeParsed.split(\" \"), themeObj.class)){\n                  buttonThemesParsed[themeButton] = `${themeParsed} ${themeObj.class}`;\n                }\n              } else {\n                buttonThemesParsed[themeButton] = themeObj.class;\n              }\n            });\n          }\n        } else {\n          console.warn(`buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`)\n        }\n      });\n    }\n\n    /**\n     * Adding themeClass, layoutClass to keyboardDOM\n     */\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses}`;\n\n    /**\n     * Iterating through each row\n     */\n    layout[this.options.layoutName].forEach((row, rIndex) => {\n      let rowArray = row.split(' ');\n\n      /**\n       * Creating empty row\n       */\n      var rowDOM = document.createElement('div');\n      rowDOM.className += \"hg-row\";\n\n      /**\n       * Iterating through each button in row\n       */\n      rowArray.forEach((button, bIndex) => {\n        let fctBtnClass = this.utilities.getButtonClass(button);\n        let buttonThemeClass = buttonThemesParsed[button];\n        let buttonDisplayName = this.utilities.getButtonDisplayName(button, this.options.display, this.options.mergeDisplay);\n\n        /**\n         * Creating button\n         */\n        var buttonDOM = document.createElement('div');\n        buttonDOM.className += `hg-button ${fctBtnClass}${buttonThemeClass ? \" \"+buttonThemeClass : \"\"}`;\n        \n        if (useTouchEvents) {\n          buttonDOM.ontouchstart = (e) => {\n            this.handleButtonClicked(button);\n            this.handleButtonMouseDown(button, e);\n          }\n          buttonDOM.ontouchend = e => this.handleButtonMouseUp();\n          buttonDOM.ontouchcancel = e => this.handleButtonMouseUp();\n        } else {\n          buttonDOM.onclick = () => {\n            this.isMouseHold = false;\n            this.handleButtonClicked(button);\n          }\n          buttonDOM.onmousedown = (e) => {\n            if (this.options.preventMouseDownDefault) e.preventDefault();\n            this.handleButtonMouseDown(button, e);\n          }\n        }\n        \n        /**\n         * Adding identifier\n         */\n        buttonDOM.setAttribute(\"data-skBtn\", button);\n\n        /**\n         * Adding unique id\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\n         */\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\n\n        /**\n         * Adding display label\n         */\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\n\n        /**\n         * Adding button label to button\n         */\n        var buttonSpanDOM = document.createElement('span');\n        buttonSpanDOM.innerHTML = buttonDisplayName;\n        buttonDOM.appendChild(buttonSpanDOM);\n\n        /**\n         * Adding to buttonElements\n         */\n        if(!this.buttonElements[button])\n          this.buttonElements[button] = [];\n\n        this.buttonElements[button].push(buttonDOM);\n\n        /**\n         * Appending button to row\n         */\n        rowDOM.appendChild(buttonDOM);\n\n      });\n\n      /**\n       * Appending row to keyboard\n       */\n      this.keyboardDOM.appendChild(rowDOM);\n    });\n\n    /**\n     * Calling onRender\n     */\n    this.onRender();\n\n    if(!this.initialized){\n      /**\n       * Ensures that onInit is only called once per instantiation\n       */\n      this.initialized = true;\n\n      /**\n       * Handling mouseup\n       */\n      if (!useTouchEvents) {\n        document.onmouseup = () => this.handleButtonMouseUp();\n      }\n\n      /**\n       * Calling onInit\n       */\n      this.onInit();\n    }\n  }\n}\n\nexport default SimpleKeyboard;\n","import SimpleKeyboard from './components/Keyboard';\nexport default SimpleKeyboard;\n"],"sourceRoot":""}